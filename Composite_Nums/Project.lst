Microsoft (R) Macro Assembler Version 14.00.24210.0	    11/02/16 16:34:55
:Program 04: Composite Number Generator     (Program04.asm   Page 1 - 1


				TITLE Program 04: Composite Number Generator     (Program04.asm)

				; Author: Jacob Karcz  karczj@oregonstate.edu               Date: 10.28.2016
				; Course: CS271-400               
				; Assignment ID:  Program 04                                Date Due: 11.06.2016

				; Description: This program calculates and displays composite numbers. Specifically:
				;              1. Displays the program title and programmer's name.
				;              2. Gets the user's name and greets the user. Then displays instructions for the user.
				;              3. Prompts the user to enter a number (n) greater than 1 (upper limit of 400 is used when printing)
				;                   i. validates the n to be greater than 1, if out of range, the user is prompted again
				;                      until a valid value is entered
				;              4. Calculates and displays composites all of the composite numbers up to (and including) the nth composite
				;                   i. results are printed 10 numbers per line, in aligned columns, 400 numbers per "page"
				;              5. Program displays a farewell message
				;
				;              *Extra Credit
				;                   1) Output columns are aligned
				;                   2) program displays a maximum of 400 numbers per"page," 
				;                      then displays "push any key to continue..." before continueing

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				     ; constants
 = 400				     MAX       equ       <400>
 = 0				     MIN       equ       <0>

 00000000			.data

				     ; VARIABLES
 00000000  00000021 [		     userName  BYTE     33 DUP(0)
	    00
	   ]
				     

				     ;STRINGS

				     ;intro & greeting strings
 00000021 43 53 32 37 31	     intro     BYTE     "CS271 Project 4: Composite Number Generator by Jacob Karcz", 0
	   20 50 72 6F 6A
	   65 63 74 20 34
	   3A 20 43 6F 6D
	   70 6F 73 69 74
	   65 20 4E 75 6D
	   62 65 72 20 47
	   65 6E 65 72 61
	   74 6F 72 20 62
	   79 20 4A 61 63
	   6F 62 20 4B 61
	   72 63 7A 00
 0000005C 20 20 20 20 20	     EC1       BYTE     "     **EC1: Input is algined.", 0
	   2A 2A 45 43 31
	   3A 20 49 6E 70
	   75 74 20 69 73
	   20 61 6C 67 69
	   6E 65 64 2E 00
 0000007A 20 20 20 20 20	     EC2       BYTE     "     **EC2: Display more composites in multiple 'pages'", 0
	   2A 2A 45 43 32
	   3A 20 44 69 73
	   70 6C 61 79 20
	   6D 6F 72 65 20
	   63 6F 6D 70 6F
	   73 69 74 65 73
	   20 69 6E 20 6D
	   75 6C 74 69 70
	   6C 65 20 27 70
	   61 67 65 73 27
	   00
 000000B2 20 20 20 20 20	     EC3       BYTE     "     **EC3: Check against prime divisors", 0
	   2A 2A 45 43 33
	   3A 20 43 68 65
	   63 6B 20 61 67
	   61 69 6E 73 74
	   20 70 72 69 6D
	   65 20 64 69 76
	   69 73 6F 72 73
	   00
 000000DB 57 65 27 6C 6C	     getName   BYTE     "We'll get started soon... but first, what is your name?", 0
	   20 67 65 74 20
	   73 74 61 72 74
	   65 64 20 73 6F
	   6F 6E 2E 2E 2E
	   20 62 75 74 20
	   66 69 72 73 74
	   2C 20 77 68 61
	   74 20 69 73 20
	   79 6F 75 72 20
	   6E 61 6D 65 3F
	   00
 00000113 48 69 20 00		     greetng1  BYTE     "Hi ",0
 00000117 21 20 50 6C 65	     greetng2  BYTE     "! Pleasure to meet you!", 0
	   61 73 75 72 65
	   20 74 6F 20 6D
	   65 65 74 20 79
	   6F 75 21 00
 0000012F 4E 6F 77 20 6C	     intro0    BYTE     "Now let's get started...", 0
	   65 74 27 73 20
	   67 65 74 20 73
	   74 61 72 74 65
	   64 2E 2E 2E 00
 00000148 4F 4B 2C 20 00	     intro1    BYTE     "OK, ", 0
 0000014D 2C 20 79 6F 75	     intro2    BYTE     ", you will enter a number (n) greater than 1 and I will display a list of n composite numbers.", 0
	   20 77 69 6C 6C
	   20 65 6E 74 65
	   72 20 61 20 6E
	   75 6D 62 65 72
	   20 28 6E 29 20
	   67 72 65 61 74
	   65 72 20 74 68
	   61 6E 20 31 20
	   61 6E 64 20 49
	   20 77 69 6C 6C
	   20 64 69 73 70
	   6C 61 79 20 61
	   20 6C 69 73 74
	   20 6F 66 20 6E
	   20 63 6F 6D 70
	   6F 73 69 74 65
	   20 6E 75 6D 62
	   65 72 73 2E 00

				     ;data collection strings
 000001AC 45 6E 74 65 72	     instruct  BYTE     "Enter Enter the number of composites to calculate and display (lists over 400 will display on multiple pages).", 0
	   20 45 6E 74 65
	   72 20 74 68 65
	   20 6E 75 6D 62
	   65 72 20 6F 66
	   20 63 6F 6D 70
	   6F 73 69 74 65
	   73 20 74 6F 20
	   63 61 6C 63 75
	   6C 61 74 65 20
	   61 6E 64 20 64
	   69 73 70 6C 61
	   79 20 28 6C 69
	   73 74 73 20 6F
	   76 65 72 20 34
	   30 30 20 77 69
	   6C 6C 20 64 69
	   73 70 6C 61 79
	   20 6F 6E 20 6D
	   75 6C 74 69 70
	   6C 65 20 70 61
	   67 65 73 29 2E
	   00
 0000021B 59 6F 75 72 20	     prompt    BYTE     "Your choice: ", 0
	   63 68 6F 69 63
	   65 3A 20 00
 00000229 4E 75 6D 62 65	     error     BYTE     "Number out of range, try again...", 0
	   72 20 6F 75 74
	   20 6F 66 20 72
	   61 6E 67 65 2C
	   20 74 72 79 20
	   61 67 61 69 6E
	   2E 2E 2E 00
				    

				     ;closing strings
 0000024B 47 6F 6F 64 62	     bye1      BYTE     "Goodbye ", 0
	   79 65 20 00
 00000254 21 20 49 74 20	     bye2      BYTE     "! It was a pleasure to serve you!", 0
	   77 61 73 20 61
	   20 70 6C 65 61
	   73 75 72 65 20
	   74 6F 20 73 65
	   72 76 65 20 79
	   6F 75 21 00

				     ;extra strings
 00000276 20 20 20 20 20	     app01     BYTE     "                         #", 0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   23 00
 00000291 20 20 20 20 20	     app0      BYTE     "                       ###", 0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 23 23
	   23 00
 000002AC 20 20 20 20 20	     app1      BYTE     "                     ####", 0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 23 23 23 23
	   00
 000002C6 20 20 20 20 20	     app2      BYTE     "                     ### ", 0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 23 23 23 20
	   00
 000002E0 20 20 20 20 20	     app3      BYTE     "             #######    #######", 0
	   20 20 20 20 20
	   20 20 20 23 23
	   23 23 23 23 23
	   20 20 20 20 23
	   23 23 23 23 23
	   23 00
 00000300 20 20 20 20 20	     app4      BYTE     "           ######################", 0
	   20 20 20 20 20
	   20 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 00
 00000322 20 20 20 20 20	     app5      BYTE     "          #####################", 0
	   20 20 20 20 20
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 00
 00000342 20 20 20 20 20	     app6      BYTE     "          ####################", 0    
	   20 20 20 20 20
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   00
 00000361 20 20 20 20 20	     App7      BYTE     "          ####################", 0
	   20 20 20 20 20
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   00
 00000380 20 20 20 20 20	     app8      BYTE     "          #####################", 0
	   20 20 20 20 20
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 00
 000003A0 20 20 20 20 20	     app9      BYTE     "           ######################", 0
	   20 20 20 20 20
	   20 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 00
 000003C2 20 20 20 20 20	     app10     BYTE     "            ####################", 0
	   20 20 20 20 20
	   20 20 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 00
 000003E3 20 20 20 20 20	     app11     BYTE     "             #################", 0
	   20 20 20 20 20
	   20 20 20 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   00
 00000402 20 20 20 20 20	     app12     BYTE     "               ####     #####", 0
	   20 20 20 20 20
	   20 20 20 20 20
	   23 23 23 23 20
	   20 20 20 20 23
	   23 23 23 23 00
 00000420 20 20 20 20 20	     app13     BYTE     "         ..............................", 0
	   20 20 20 20 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 00
 00000448 20 20 20 20 20	     app14     BYTE     "            There's a better way...", 0
	   20 20 20 20 20
	   20 20 54 68 65
	   72 65 27 73 20
	   61 20 62 65 74
	   74 65 72 20 77
	   61 79 2E 2E 2E
	   00
 0000046C 57 61 6E 6E 61	     again     BYTE     "Wanna have another go? If yes, enter y", 0
	   20 68 61 76 65
	   20 61 6E 6F 74
	   68 65 72 20 67
	   6F 3F 20 49 66
	   20 79 65 73 2C
	   20 65 6E 74 65
	   72 20 79 00
 00000493 45 78 74 72 61	     dTitle    BYTE     "Extra Credit Message:", 0
	   20 43 72 65 64
	   69 74 20 4D 65
	   73 73 61 67 65
	   3A 00
 000004A9 41 72 65 20 79	     msg       BYTE     "Are you planning on voting?", 0
	   6F 75 20 70 6C
	   61 6E 6E 69 6E
	   67 20 6F 6E 20
	   76 6F 74 69 6E
	   67 3F 00

				;*******************************************************************************************************





 00000000			.code
 00000000			main PROC

				     ;intro
 00000000  E8 0000002A		     call      introduction
 00000005  E8 0000006E		     call      greeting

				     ;get number from user
 0000000A  B9 0000021B R	     mov       ecx, OFFSET prompt
 0000000F  BA 000001AC R	     mov       edx, OFFSET instruct
 00000014  E8 000000EC		     call      getData

				     ;display composite list
 00000019  E8 0000013D		     call      showComposites

				     ;closing
 0000001E  E8 000001D5		     call      goodBye
 00000023  E8 00000260		     call      apple

					exit	; exit to operating system
 00000028  6A 00	   *	    push   +000000000h
 0000002A  E8 00000000 E   *	    call   ExitProcess
 0000002F			main ENDP







				;*******************************************************************************************************

				;*******************************************************************************************************
				;----------------------------------------------- PROCEDURES --------------------------------------------
				;*******************************************************************************************************

				;*******************************************************************************************************
				;Procedure to introduce the program and the programmer name
				;receives: nothing
				;returns: printed statements to the screen
				;preconditions: define strings: intro, EC1, EC2, and EC3
				;registers changed: none
				;*******************************************************************************************************
 0000002F			introduction PROC

 0000002F  52			     push      edx

				     ; display title,  developer, and extra credit
 00000030  E8 0000022C		     call      greyText
 00000035  BA 00000021 R	     mov       edx, OFFSET intro
 0000003A  E8 00000000 E	     call      writeString
 0000003F  E8 00000000 E	     call      CrLf
 00000044  BA 0000005C R	     mov       edx, OFFSET EC1
 00000049  E8 00000000 E	     call      writeString
 0000004E  E8 00000000 E	     call      CrLf
 00000053  BA 0000007A R	     mov       edx, OFFSET EC2
 00000058  E8 00000000 E	     call      writeString
 0000005D  E8 00000000 E	     call      CrLf
 00000062  BA 000000B2 R	     mov       edx, OFFSET EC3
 00000067  E8 00000000 E	     call      writeString
 0000006C  E8 00000000 E	     call      CrLf
 00000071  E8 00000000 E	     call      CrLf

 00000076  5A			     pop       edx

 00000077  C3			     ret
 00000078			introduction ENDP

				;*******************************************************************************************************
				;Procedure to get the user's name and greet the user
				;receives: nothing
				;returns: the userName is initialized with the user's name
				;preconditions: uninitialized string userName
				;               define strings: getName, greeting1, greeting2, intro1, intro2
				;registers changed: EDX holds the userName string
				;*******************************************************************************************************
 00000078			greeting PROC
				     
				     ;getName
 00000078  E8 000001BD			call      blueText
 0000007D  BA 000000DB R	     mov       edx, OFFSET getName
 00000082  E8 00000000 E	     call      writeString
 00000087  E8 00000000 E	     call      CrLf
 0000008C  E8 00000000 E	     call      CrLf
 00000091  E8 000001BE		     call      whiteText
 00000096  BA 00000000 R	     mov       edx, OFFSET userName
 0000009B  B9 00000020		     mov       ecx, 32
 000000A0  E8 00000000 E	     call      readString
 000000A5  E8 00000000 E	     call      CrLf

					;greeting
 000000AA  E8 0000018B			call      blueText
 000000AF  BA 00000113 R	     mov       edx, OFFSET greetng1
 000000B4  E8 00000000 E	     call      writeString
 000000B9  BA 00000000 R	     mov       edx, OFFSET userName
 000000BE  E8 00000000 E	     call      writeString
 000000C3  BA 00000117 R	     mov       edx, OFFSET greetng2
 000000C8  E8 00000000 E	     call      writeString
 000000CD  E8 00000000 E	     call      CrLf
 000000D2  E8 00000000 E	     call      CrLf

				     ;instructions
 000000D7  E8 0000016B		     call      purpleText
 000000DC  BA 00000148 R	     mov       edx, OFFSET intro1
 000000E1  E8 00000000 E	     call      writeString
 000000E6  BA 00000000 R	     mov       edx, OFFSET userName
 000000EB  E8 00000000 E	     call      writeString
 000000F0  BA 0000014D R	     mov       edx, OFFSET intro2
 000000F5  E8 00000000 E	     call      writeString
 000000FA  E8 00000000 E	     call      CrLf
 000000FF  E8 00000000 E	     call      CrLf

 00000104  C3			     ret
 00000105			greeting ENDP

				;*******************************************************************************************************
				;Procedure to get a number from the user
				;receives: an instruction string in EDX and a prompt in ECX
				;returns: the number in EAX
				;preconditions: none
				;registers changed: EAX holds the user's number 
				;*******************************************************************************************************
 00000105			getData PROC
				     
				     ;if not first attempt, skip to prompt
 00000105  83 F8 00		     cmp       eax, MIN
 00000108  7E 0F		     jle       getNum

				     ;instruct
 0000010A  E8 0000012B		     call      blueText
 0000010F  E8 00000000 E	     call      writeString
 00000114  E8 00000000 E	     call      CrLf

 00000119			     getNum:
 00000119  8B D1		     mov       edx, ecx
 0000011B  E8 0000015B		     call      yellowText
 00000120  E8 00000000 E	     call      writeString
 00000125  E8 0000012A		     call      whiteText
 0000012A  E8 00000000 E	     call      readInt
 0000012F  E8 00000000 E	     call      CrLf

 00000134  E8 00000001		     call      validate

 00000139  C3			     ret
 0000013A			getData ENDP

				;*******************************************************************************************************
				;Procedure to validate user's data is greater than MIN
				;receives: a number to validate in EAX
				;returns: nothing, prints error message and calls getData if the number is out of range
				;preconditions: a number to validate in EAX
				;               a global constant MIN
				;               define string: error
				;registers changed: none
				;*******************************************************************************************************
 0000013A			validate PROC
				     
				     ;data validation
 0000013A  52			     push      edx
 0000013B  83 F8 00		     cmp       eax, MIN
 0000013E  7F 19		     jg        valid

				     ;number invalid
 00000140  E8 00000129		     call      redText
 00000145  BA 00000229 R	     mov       edx, OFFSET error
 0000014A  E8 00000000 E	     call      writeString
 0000014F  E8 00000000 E	     call      CrLf
 00000154  E8 FFFFFFAC		     call      getData

 00000159			valid:
 00000159  5A			     pop       edx

 0000015A  C3			     ret
 0000015B			validate ENDP

				;*******************************************************************************************************
				;Procedure to calculate and display composite numbers
				;receives: the total number of composite numbers to print in EAX
				;returns: The requested composites printed, 400 per "page" in algined columns
				;preconditions: the number of composites to print in eax
				;registers changed: none
				;*******************************************************************************************************
 0000015B			showComposites PROC

				     ;save used registers
 0000015B  50			     push      eax       ;holds the number current number to print
 0000015C  53			     push      ebx       ;tracks printed numbers
 0000015D  51			     push      ecx       ;loop counter
 0000015E  52			     push      edx       ;remainder checking
 0000015F  56			     push      esi       ;columns
 00000160  55			     push      ebp       ;used for formatting divisions

				     ;initialize registers
 00000161  8B C8		     mov       ecx, eax  ;initialize loop
 00000163  BB 00000001		     mov       ebx, 1    ;initialize count 
 00000168  B8 00000004		     mov       eax, 4    ;n starts at 4
 0000016D  BE 00000001		     mov       esi, 1    ;track columns


 00000172			     print:
 00000172  E8 000000B6		          call      greenText
 00000177  E8 00000060		          call      isComposite
 0000017C  E8 00000000 E	          call      writeDec

				          ;format output
 00000181  50			          push      eax
 00000182  52			          push      edx
 00000183  B8 00000009		          mov       eax, 9
 00000188  E8 00000000 E	          call      writeChar
 0000018D  BD 0000000A		          mov       ebp, 10
 00000192  8B C6		          mov       eax, esi
 00000194  99			          cdq
 00000195  F7 F5		          div       ebp
 00000197  83 FA 00		          cmp       edx, 0
 0000019A  75 05		          jne       sameLine
 0000019C  E8 00000000 E	          call      CrLf
 000001A1			     sameLine:
 000001A1  46			          inc       esi
 000001A2  BD 00000190		          mov       ebp, MAX
 000001A7  8B C3		          mov       eax, ebx
 000001A9  99			          cdq
 000001AA  F7 F5		          div       ebp
 000001AC  83 FA 00		          cmp       edx, 0
 000001AF  75 19		          jne       noWait
 000001B1  E8 00000000 E	          call      CrLf
 000001B6  E8 000000A6		          call      greyText
 000001BB  E8 00000000 E	          call      waitMsg
 000001C0  E8 00000000 E	          call      CrLf
 000001C5  E8 00000000 E	          call      CrLf
 000001CA			     noWait:
 000001CA  5A			          pop       edx
 000001CB  58			          pop       eax
 000001CC  40			          inc       eax
 000001CD  43			          inc       ebx

 000001CE  E2 A2		          loop      print

 000001D0  E8 00000000 E	     call      CrLf

				     ;restore registers
 000001D5  5D			     pop       ebp
 000001D6  5E			     pop       esi
 000001D7  5A			     pop       edx
 000001D8  59			     pop       ecx
 000001D9  5B			     pop       ebx
 000001DA  58			     pop       eax

 000001DB  C3			     ret
 000001DC			showComposites ENDP

				;*******************************************************************************************************
				;Procedure to test whether a number is composite
				;receives: a number to test in eax
				;returns: the next valid composite number (inclusive of number passed in eax)
				;preconditions: a number to test in eax, isComposite PROC, and Irvine-32 library included
				;registers changed: eax, if the number passed was not a composite
				;*******************************************************************************************************
 000001DC			isComposite PROC

				     ;Registers used
				     ;EAX - receives the current number to test and returns the next number to print (INC EAX IN showComps)
				     ;EDX - used in division
				     ;ESI - accumulator holding factors for division

				     ;save registers
 000001DC  52			     push      edx
 000001DD  56			     push      esi


 000001DE			tryAgain:
				     ;(re)initialize esi
 000001DE  BE 00000002		     mov       esi, 2   

				     ;test current number
 000001E3			     testLoop:
 000001E3  50			          push      eax            ;save EAX
 000001E4  99			          cdq
 000001E5  F7 F6		          div       esi
 000001E7  58			          pop       eax            ;restore EAX
 000001E8  83 FA 00		          cmp       edx, 0
 000001EB  74 08		          je        foundComposite
 000001ED  46			          inc       esi
 000001EE  3B F0		          cmp       esi, eax
 000001F0  7C F1		          jl        testLoop
				 
 000001F2  40			          inc       eax            ;move to next number
 000001F3  EB E9		          jmp       tryAgain

 000001F5			     foundComposite:
				          ;restore registers
 000001F5  5E			          pop       esi
 000001F6  5A			          pop       edx

 000001F7  C3			     ret
 000001F8			isComposite ENDP

				;*******************************************************************************************************
				;Procedure to say goodbye to the user upon program completion
				;receives: nothing
				;returns: prints goodbye message
				;preconditions: define strings: bye1, userName, and bye2
				;registers changed: none
				;*******************************************************************************************************
 000001F8			goodBye PROC

 000001F8  52			     push      edx

				     ;say goodBye
 000001F9  E8 00000049		     call      purpleText
 000001FE  E8 00000000 E	     call      CrLf
 00000203  BA 0000024B R	     mov       edx, OFFSET bye1
 00000208  E8 00000000 E	     call      writeString
 0000020D  BA 00000000 R	     mov       edx, OFFSET userName
 00000212  E8 00000000 E	     call      writeString
 00000217  BA 00000254 R	     mov       edx, OFFSET bye2
 0000021C  E8 00000000 E	     call      writeString
 00000221  E8 00000000 E	     call      CrLf
 00000226  E8 00000000 E	     call      CrLf

 0000022B  5A			     pop       edx

 0000022C  C3			     ret
 0000022D			goodBye ENDP





				;***********************************   other procedures   ********************************
				;
				;
				;********************************************************************************************************
				;Procedure to make the text green
				;receives: nothing
				;returns: nothing, sets text color to green
				;preconditions: Irvine-32 Library
				;registers changed: none
				;********************************************************************************************************
 0000022D			greenText PROC
 0000022D  50			     push      eax
 0000022E  B8 0000000A		     mov       eax, 10
 00000233  E8 00000000 E	     call      setTextColor
 00000238  58			     pop       eax

 00000239  C3			     ret
 0000023A			greenText ENDP

				;********************************************************************************************************
				;Procedure to make the text blue
				;receives: nothing
				;returns: nothing, sets text color to blue
				;preconditions: Irvine-32 Library
				;registers changed: none
				;********************************************************************************************************
 0000023A			blueText PROC
 0000023A  50			     push      eax
 0000023B  B8 0000000B		     mov       eax, 11
 00000240  E8 00000000 E	     call      setTextColor
 00000245  58			     pop       eax

 00000246  C3			     ret
 00000247			blueText ENDP

				;********************************************************************************************************
				;Procedure to make the text purple
				;receives: nothing
				;returns: nothing, sets text color to purple
				;preconditions: Irvine-32 Library
				;registers changed: none
				;********************************************************************************************************
 00000247			purpleText PROC
 00000247  50			     push      eax
 00000248  B8 0000000D		     mov       eax, 13
 0000024D  E8 00000000 E	     call      setTextColor
 00000252  58			     pop       eax

 00000253  C3			     ret
 00000254			purpleText ENDP

				;********************************************************************************************************
				;Procedure to make the text white
				;receives: nothing
				;returns: nothing, sets text color to white
				;preconditions: Irvine-32 Library
				;registers changed: none
				;********************************************************************************************************
 00000254			whiteText PROC
 00000254  50			     push      eax
 00000255  B8 0000000F		     mov       eax, 15
 0000025A  E8 00000000 E	     call      setTextColor
 0000025F  58			     pop       eax

 00000260  C3			     ret
 00000261			whiteText ENDP

				;********************************************************************************************************
				;Procedure to make the text grey
				;receives: nothing
				;returns: nothing, sets text color to grey
				;preconditions: Irvine-32 Library
				;registers changed: none
				;********************************************************************************************************
 00000261			greyText PROC
 00000261  50			     push      eax
 00000262  B8 00000007		     mov       eax, 7
 00000267  E8 00000000 E	     call      setTextColor
 0000026C  58			     pop       eax

 0000026D  C3			     ret
 0000026E			greyText ENDP

				;********************************************************************************************************
				;Procedure to make the text red
				;receives: nothing
				;returns: nothing, sets text color to red
				;preconditions: Irvine-32 Library
				;registers changed: none
				;********************************************************************************************************
 0000026E			redText PROC
 0000026E  50			     push      eax
 0000026F  B8 0000000C		     mov       eax, 12
 00000274  E8 00000000 E	     call      setTextColor
 00000279  58			     pop       eax

 0000027A  C3			     ret
 0000027B			redText ENDP

				;********************************************************************************************************
				;Procedure to make the text yellow
				;receives: nothing
				;returns: nothing, sets text color to yellow
				;preconditions: Irvine-32 Library
				;registers changed: none
				;********************************************************************************************************
 0000027B			yellowText PROC
 0000027B  50			     push      eax
 0000027C  B8 0000000E		     mov       eax, 14
 00000281  E8 00000000 E	     call      setTextColor
 00000286  58			     pop       eax

 00000287  C3			     ret
 00000288			yellowText ENDP

				;************************************************************************************************************
				;Procedure to print an apple!
				;receives: nothing
				;returns: prints a white apple logo!
				;preconditions: the strings holding the apple logo lines defined... (app01, app0, app1... app14)
				;registers changed: None!
				;************************************************************************************************************
 00000288			apple PROC

				     ;Apple == bestest
 00000288  50			     push      eax
 00000289  52			     push      edx
 0000028A  E8 FFFFFFC5		     call      whiteText
 0000028F  BA 00000276 R	     mov       edx, OFFSET app01
 00000294  E8 00000000 E	     call      writeString
 00000299  E8 00000000 E	     call      CrLf
 0000029E  BA 00000291 R	     mov       edx, OFFSET app0
 000002A3  E8 00000000 E	     call      writeString
 000002A8  E8 00000000 E	     call      CrLf
 000002AD  BA 000002AC R	     mov       edx, OFFSET app1
 000002B2  E8 00000000 E	     call      writeString
 000002B7  E8 00000000 E	     call      CrLf
 000002BC  BA 000002C6 R	     mov       edx, OFFSET app2
 000002C1  E8 00000000 E	     call      writeString
 000002C6  E8 00000000 E	     call      CrLf
 000002CB  BA 000002E0 R	     mov       edx, OFFSET app3
 000002D0  E8 00000000 E	     call      writeString
 000002D5  E8 00000000 E	     call      CrLf
 000002DA  BA 00000300 R	     mov       edx, OFFSET app4
 000002DF  E8 00000000 E	     call      writeString
 000002E4  E8 00000000 E	     call      CrLf
 000002E9  BA 00000322 R	     mov       edx, OFFSET app5
 000002EE  E8 00000000 E	     call      writeString
 000002F3  E8 00000000 E	     call      CrLf
 000002F8  BA 00000342 R	     mov       edx, OFFSET app6
 000002FD  E8 00000000 E	     call      writeString
 00000302  E8 00000000 E	     call      CrLf
 00000307  BA 00000361 R	     mov       edx, OFFSET app7
 0000030C  E8 00000000 E	     call      writeString
 00000311  E8 00000000 E	     call      CrLf
 00000316  BA 00000380 R	     mov       edx, OFFSET app8
 0000031B  E8 00000000 E	     call      writeString
 00000320  E8 00000000 E	     call      CrLf
 00000325  BA 000003A0 R	     mov       edx, OFFSET app9
 0000032A  E8 00000000 E	     call      writeString
 0000032F  E8 00000000 E	     call      CrLf
 00000334  BA 000003C2 R	     mov       edx, OFFSET app10
 00000339  E8 00000000 E	     call      writeString
 0000033E  E8 00000000 E	     call      CrLf
 00000343  BA 000003E3 R	     mov       edx, OFFSET app11
 00000348  E8 00000000 E	     call      writeString
 0000034D  E8 00000000 E	     call      CrLf
 00000352  BA 00000402 R	     mov       edx, OFFSET app12
 00000357  E8 00000000 E	     call      writeString
 0000035C  E8 00000000 E	     call      CrLf
 00000361  BA 00000420 R	     mov       edx, OFFSET app13
 00000366  E8 00000000 E	     call      writeString
 0000036B  E8 00000000 E	     call      CrLf
 00000370  BA 00000448 R	     mov       edx, OFFSET app14
 00000375  E8 00000000 E	     call      writeString
 0000037A  E8 FFFFFEE2		     call      greyText
 0000037F  E8 00000000 E	     call      CrLf
 00000384  E8 00000000 E	     call      CrLf
 00000389  E8 00000000 E	     call      CrLf
 0000038E  5A			     pop       edx
 0000038F  58			     pop       eax

 00000390  C3			     ret
 00000391			apple ENDP



				END main
Microsoft (R) Macro Assembler Version 14.00.24210.0	    11/02/16 16:34:55
:Program 04: Composite Number Generator     (Program04.asm   Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000004C5 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000391 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
apple  . . . . . . . . . . . . .	P Near	 00000288 _TEXT	Length= 00000109 Public STDCALL
blueText . . . . . . . . . . . .	P Near	 0000023A _TEXT	Length= 0000000D Public STDCALL
getData  . . . . . . . . . . . .	P Near	 00000105 _TEXT	Length= 00000035 Public STDCALL
  getNum . . . . . . . . . . . .	L Near	 00000119 _TEXT	
goodBye  . . . . . . . . . . . .	P Near	 000001F8 _TEXT	Length= 00000035 Public STDCALL
greenText  . . . . . . . . . . .	P Near	 0000022D _TEXT	Length= 0000000D Public STDCALL
greeting . . . . . . . . . . . .	P Near	 00000078 _TEXT	Length= 0000008D Public STDCALL
greyText . . . . . . . . . . . .	P Near	 00000261 _TEXT	Length= 0000000D Public STDCALL
introduction . . . . . . . . . .	P Near	 0000002F _TEXT	Length= 00000049 Public STDCALL
isComposite  . . . . . . . . . .	P Near	 000001DC _TEXT	Length= 0000001C Public STDCALL
  tryAgain . . . . . . . . . . .	L Near	 000001DE _TEXT	
  testLoop . . . . . . . . . . .	L Near	 000001E3 _TEXT	
  foundComposite . . . . . . . .	L Near	 000001F5 _TEXT	
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000002F Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
purpleText . . . . . . . . . . .	P Near	 00000247 _TEXT	Length= 0000000D Public STDCALL
redText  . . . . . . . . . . . .	P Near	 0000026E _TEXT	Length= 0000000D Public STDCALL
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
showComposites . . . . . . . . .	P Near	 0000015B _TEXT	Length= 00000081 Public STDCALL
  print  . . . . . . . . . . . .	L Near	 00000172 _TEXT	
  sameLine . . . . . . . . . . .	L Near	 000001A1 _TEXT	
  noWait . . . . . . . . . . . .	L Near	 000001CA _TEXT	
validate . . . . . . . . . . . .	P Near	 0000013A _TEXT	Length= 00000021 Public STDCALL
  valid  . . . . . . . . . . . .	L Near	 00000159 _TEXT	
whiteText  . . . . . . . . . . .	P Near	 00000254 _TEXT	Length= 0000000D Public STDCALL
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
yellowText . . . . . . . . . . .	P Near	 0000027B _TEXT	Length= 0000000D Public STDCALL


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
App7 . . . . . . . . . . . . . .	Byte	 00000361 _DATA	
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
EC1  . . . . . . . . . . . . . .	Byte	 0000005C _DATA	
EC2  . . . . . . . . . . . . . .	Byte	 0000007A _DATA	
EC3  . . . . . . . . . . . . . .	Byte	 000000B2 _DATA	
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MAX  . . . . . . . . . . . . . .	Text   	 400
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MIN  . . . . . . . . . . . . . .	Text   	 0
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
again  . . . . . . . . . . . . .	Byte	 0000046C _DATA	
app01  . . . . . . . . . . . . .	Byte	 00000276 _DATA	
app0 . . . . . . . . . . . . . .	Byte	 00000291 _DATA	
app10  . . . . . . . . . . . . .	Byte	 000003C2 _DATA	
app11  . . . . . . . . . . . . .	Byte	 000003E3 _DATA	
app12  . . . . . . . . . . . . .	Byte	 00000402 _DATA	
app13  . . . . . . . . . . . . .	Byte	 00000420 _DATA	
app14  . . . . . . . . . . . . .	Byte	 00000448 _DATA	
app1 . . . . . . . . . . . . . .	Byte	 000002AC _DATA	
app2 . . . . . . . . . . . . . .	Byte	 000002C6 _DATA	
app3 . . . . . . . . . . . . . .	Byte	 000002E0 _DATA	
app4 . . . . . . . . . . . . . .	Byte	 00000300 _DATA	
app5 . . . . . . . . . . . . . .	Byte	 00000322 _DATA	
app6 . . . . . . . . . . . . . .	Byte	 00000342 _DATA	
app8 . . . . . . . . . . . . . .	Byte	 00000380 _DATA	
app9 . . . . . . . . . . . . . .	Byte	 000003A0 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
bye1 . . . . . . . . . . . . . .	Byte	 0000024B _DATA	
bye2 . . . . . . . . . . . . . .	Byte	 00000254 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
dTitle . . . . . . . . . . . . .	Byte	 00000493 _DATA	
error  . . . . . . . . . . . . .	Byte	 00000229 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
getName  . . . . . . . . . . . .	Byte	 000000DB _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
greetng1 . . . . . . . . . . . .	Byte	 00000113 _DATA	
greetng2 . . . . . . . . . . . .	Byte	 00000117 _DATA	
instruct . . . . . . . . . . . .	Byte	 000001AC _DATA	
intro0 . . . . . . . . . . . . .	Byte	 0000012F _DATA	
intro1 . . . . . . . . . . . . .	Byte	 00000148 _DATA	
intro2 . . . . . . . . . . . . .	Byte	 0000014D _DATA	
intro  . . . . . . . . . . . . .	Byte	 00000021 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
msg  . . . . . . . . . . . . . .	Byte	 000004A9 _DATA	
prompt . . . . . . . . . . . . .	Byte	 0000021B _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
userName . . . . . . . . . . . .	Byte	 00000000 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
