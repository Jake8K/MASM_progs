Microsoft (R) Macro Assembler Version 14.00.24210.0	    10/16/16 17:17:18
<Program 2: Calculate a Fibonacci Sequence     (Project_02.a  Page 1 - 1


				TITLE Program 2: Calculate a Fibonacci Sequence     (Project_02.asm)

				; Author: Jacob Karcz  karczj@oregonstate.edu               Date: 10.12.2016
				; Course: CS271-400               
				; Assignment ID:  Project 02                                Date Due: 10.16.2016
				;
				; Description: The program introduces the objective of the program, then prompts the user for their name and personally greets them.
				;              It then explains the purpose of the program, as well as the limitations and prompts for a number (N).
				;              The program then calculates and prints out the fibonacci sequence to the Nth term, before saying
				;              goodbye to the user by name and terminating.
				;              It was a lot of fun to make, so I hope you like it too.

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				     ; CONSTANTS
 = 46				     MAX       equ       <46>
 = 1				     MIN       equ       <1>


 00000000			.data


				     ; strings
 00000000 45 43 31 3A 20	     ECi1      BYTE     "EC1: The numbers are aligned into columns", 0
	   54 68 65 20 6E
	   75 6D 62 65 72
	   73 20 61 72 65
	   20 61 6C 69 67
	   6E 65 64 20 69
	   6E 74 6F 20 63
	   6F 6C 75 6D 6E
	   73 00
 0000002A 45 43 32 3A 20	     ECi2a     BYTE     "EC2: Incredible things happen... colorful text, arithematic in various formats, the program repeats, ", 0
	   49 6E 63 72 65
	   64 69 62 6C 65
	   20 74 68 69 6E
	   67 73 20 68 61
	   70 70 65 6E 2E
	   2E 2E 20 63 6F
	   6C 6F 72 66 75
	   6C 20 74 65 78
	   74 2C 20 61 72
	   69 74 68 65 6D
	   61 74 69 63 20
	   69 6E 20 76 61
	   72 69 6F 75 73
	   20 66 6F 72 6D
	   61 74 73 2C 20
	   74 68 65 20 70
	   72 6F 67 72 61
	   6D 20 72 65 70
	   65 61 74 73 2C
	   20 00
 00000090 20 20 20 20 20	     ECi2b     BYTE     "     there's a pretty cool picture, the program pauses, the program slows down, and it even has a popup window!", 0
	   74 68 65 72 65
	   27 73 20 61 20
	   70 72 65 74 74
	   79 20 63 6F 6F
	   6C 20 70 69 63
	   74 75 72 65 2C
	   20 74 68 65 20
	   70 72 6F 67 72
	   61 6D 20 70 61
	   75 73 65 73 2C
	   20 74 68 65 20
	   70 72 6F 67 72
	   61 6D 20 73 6C
	   6F 77 73 20 64
	   6F 77 6E 2C 20
	   61 6E 64 20 69
	   74 20 65 76 65
	   6E 20 68 61 73
	   20 61 20 70 6F
	   70 75 70 20 77
	   69 6E 64 6F 77
	   21 00
 00000100 43 53 32 37 31	     intro     BYTE     "CS271 Project 2: Fibonacci Calculator by Jacob Karcz", 0
	   20 50 72 6F 6A
	   65 63 74 20 32
	   3A 20 46 69 62
	   6F 6E 61 63 63
	   69 20 43 61 6C
	   63 75 6C 61 74
	   6F 72 20 62 79
	   20 4A 61 63 6F
	   62 20 4B 61 72
	   63 7A 00
 00000135 49 27 6D 20 67	     getName   BYTE     "I'm going to calculate some Fibonacci numbers for you, but first... what is your name?", 0
	   6F 69 6E 67 20
	   74 6F 20 63 61
	   6C 63 75 6C 61
	   74 65 20 73 6F
	   6D 65 20 46 69
	   62 6F 6E 61 63
	   63 69 20 6E 75
	   6D 62 65 72 73
	   20 66 6F 72 20
	   79 6F 75 2C 20
	   62 75 74 20 66
	   69 72 73 74 2E
	   2E 2E 20 77 68
	   61 74 20 69 73
	   20 79 6F 75 72
	   20 6E 61 6D 65
	   3F 00
 0000018C 48 69 20 00		     greetng1  BYTE     "Hi ",0
 00000190 21 20 50 6C 65	     greetng2  BYTE     "! Pleasure to make your acquaintance!", 0
	   61 73 75 72 65
	   20 74 6F 20 6D
	   61 6B 65 20 79
	   6F 75 72 20 61
	   63 71 75 61 69
	   6E 74 61 6E 63
	   65 21 00
 000001B6 4E 6F 77 20 6C	     intro0    BYTE     "Now let's get started...", 0
	   65 74 27 73 20
	   67 65 74 20 73
	   74 61 72 74 65
	   64 2E 2E 2E 00
 000001CF 4F 4B 2C 20 00	     intro1    BYTE     "OK, ", 0
 000001D4 2C 20 74 68 65	     intro2    BYTE     ", the way this works is that you will give me a number between 1 and 46.", 0
	   20 77 61 79 20
	   74 68 69 73 20
	   77 6F 72 6B 73
	   20 69 73 20 74
	   68 61 74 20 79
	   6F 75 20 77 69
	   6C 6C 20 67 69
	   76 65 20 6D 65
	   20 61 20 6E 75
	   6D 62 65 72 20
	   62 65 74 77 65
	   65 6E 20 31 20
	   61 6E 64 20 34
	   36 2E 00
 0000021D 49 20 77 69 6C	     intro3    BYTE     "I will then calculate all the Fibonacci numbers from 0 to the number in the sequence that you have chosen.", 0
	   6C 20 74 68 65
	   6E 20 63 61 6C
	   63 75 6C 61 74
	   65 20 61 6C 6C
	   20 74 68 65 20
	   46 69 62 6F 6E
	   61 63 63 69 20
	   6E 75 6D 62 65
	   72 73 20 66 72
	   6F 6D 20 30 20
	   74 6F 20 74 68
	   65 20 6E 75 6D
	   62 65 72 20 69
	   6E 20 74 68 65
	   20 73 65 71 75
	   65 6E 63 65 20
	   74 68 61 74 20
	   79 6F 75 20 68
	   61 76 65 20 63
	   68 6F 73 65 6E
	   2E 00
 00000288 46 6F 72 20 65	     intro4    BYTE     "For extra credit, I'll even line them up in columns and do something incredible. Just for you...", 0
	   78 74 72 61 20
	   63 72 65 64 69
	   74 2C 20 49 27
	   6C 6C 20 65 76
	   65 6E 20 6C 69
	   6E 65 20 74 68
	   65 6D 20 75 70
	   20 69 6E 20 63
	   6F 6C 75 6D 6E
	   73 20 61 6E 64
	   20 64 6F 20 73
	   6F 6D 65 74 68
	   69 6E 67 20 69
	   6E 63 72 65 64
	   69 62 6C 65 2E
	   20 4A 75 73 74
	   20 66 6F 72 20
	   79 6F 75 2E 2E
	   2E 00
 000002E9 53 6F 2C 20 77	     prompt    BYTE     "So, what is your number? How many Fibonacci numbers do you want in your sequence?", 0
	   68 61 74 20 69
	   73 20 79 6F 75
	   72 20 6E 75 6D
	   62 65 72 3F 20
	   48 6F 77 20 6D
	   61 6E 79 20 46
	   69 62 6F 6E 61
	   63 63 69 20 6E
	   75 6D 62 65 72
	   73 20 64 6F 20
	   79 6F 75 20 77
	   61 6E 74 20 69
	   6E 20 79 6F 75
	   72 20 73 65 71
	   75 65 6E 63 65
	   3F 00
 0000033B 49 20 74 68 6F	     wrngN1    BYTE     "I thought we talked about this ", 0
	   75 67 68 74 20
	   77 65 20 74 61
	   6C 6B 65 64 20
	   61 62 6F 75 74
	   20 74 68 69 73
	   20 00
 0000035B 2C 20 74 68 65	     wrngN2    BYTE     ", the number MUST be between 1 and 46... Why don't you try again.", 0
	   20 6E 75 6D 62
	   65 72 20 4D 55
	   53 54 20 62 65
	   20 62 65 74 77
	   65 65 6E 20 31
	   20 61 6E 64 20
	   34 36 2E 2E 2E
	   20 57 68 79 20
	   64 6F 6E 27 74
	   20 79 6F 75 20
	   74 72 79 20 61
	   67 61 69 6E 2E
	   00
 0000039D 54 68 65 20 46	     fNstr1    BYTE     "The Fibonacci numbers to the ", 0
	   69 62 6F 6E 61
	   63 63 69 20 6E
	   75 6D 62 65 72
	   73 20 74 6F 20
	   74 68 65 20 00
 000003BB 20 74 68 20 6E	     fNstr2    BYTE     " th number are: ", 0
	   75 6D 62 65 72
	   20 61 72 65 3A
	   20 00
 000003CC 54 68 65 20 73	     sumStr    BYTE     "The sum of all the numbers in this sequence is  ", 0
	   75 6D 20 6F 66
	   20 61 6C 6C 20
	   74 68 65 20 6E
	   75 6D 62 65 72
	   73 20 69 6E 20
	   74 68 69 73 20
	   73 65 71 75 65
	   6E 63 65 20 69
	   73 20 20 00
 000003FD 54 68 65 20 73	     sumHex    BYTE     "The sum of the numbers in hexadecimal format is ", 0
	   75 6D 20 6F 66
	   20 74 68 65 20
	   6E 75 6D 62 65
	   72 73 20 69 6E
	   20 68 65 78 61
	   64 65 63 69 6D
	   61 6C 20 66 6F
	   72 6D 61 74 20
	   69 73 20 00
 0000042E 54 68 65 20 73	     sumBin    BYTE     "The sum of the numbers in binary format is      ", 0
	   75 6D 20 6F 66
	   20 74 68 65 20
	   6E 75 6D 62 65
	   72 73 20 69 6E
	   20 62 69 6E 61
	   72 79 20 66 6F
	   72 6D 61 74 20
	   69 73 20 20 20
	   20 20 20 00
 0000045F 47 6F 6F 64 62	     bye1      BYTE     "Goodbye ", 0
	   79 65 20 00
 00000468 21 20 49 74 20	     bye2      BYTE     "! It was a pleasure to serve you!", 0
	   77 61 73 20 61
	   20 70 6C 65 61
	   73 75 72 65 20
	   74 6F 20 73 65
	   72 76 65 20 79
	   6F 75 21 00
 0000048A 46 6F 72 20 45	     EC1       BYTE     "For Extra Credit 1, the sequence columns and rows are aligned.", 0
	   78 74 72 61 20
	   43 72 65 64 69
	   74 20 31 2C 20
	   74 68 65 20 73
	   65 71 75 65 6E
	   63 65 20 63 6F
	   6C 75 6D 6E 73
	   20 61 6E 64 20
	   72 6F 77 73 20
	   61 72 65 20 61
	   6C 69 67 6E 65
	   64 2E 00
 000004C9 46 6F 72 20 45	     EC2       BYTE     "For Extra Credit 2, the text is colorful! I spared you the ugliness of a spastic background...", 0
	   78 74 72 61 20
	   43 72 65 64 69
	   74 20 32 2C 20
	   74 68 65 20 74
	   65 78 74 20 69
	   73 20 63 6F 6C
	   6F 72 66 75 6C
	   21 20 49 20 73
	   70 61 72 65 64
	   20 79 6F 75 20
	   74 68 65 20 75
	   67 6C 69 6E 65
	   73 73 20 6F 66
	   20 61 20 73 70
	   61 73 74 69 63
	   20 62 61 63 6B
	   67 72 6F 75 6E
	   64 2E 2E 2E 00
 00000528 49 27 76 65 20	     EC3       BYTE     "I've added up the Fibonacci numbers in your sequence(s) in dec, bin, and hex formats!", 0
	   61 64 64 65 64
	   20 75 70 20 74
	   68 65 20 46 69
	   62 6F 6E 61 63
	   63 69 20 6E 75
	   6D 62 65 72 73
	   20 69 6E 20 79
	   6F 75 72 20 73
	   65 71 75 65 6E
	   63 65 28 73 29
	   20 69 6E 20 64
	   65 63 2C 20 62
	   69 6E 2C 20 61
	   6E 64 20 68 65
	   78 20 66 6F 72
	   6D 61 74 73 21
	   00
 0000057E 41 73 20 61 20	     ECA       BYTE     "As a bonus, I drew out the symbol for incredible. I hope it helps.", 0
	   62 6F 6E 75 73
	   2C 20 49 20 64
	   72 65 77 20 6F
	   75 74 20 74 68
	   65 20 73 79 6D
	   62 6F 6C 20 66
	   6F 72 20 69 6E
	   63 72 65 64 69
	   62 6C 65 2E 20
	   49 20 68 6F 70
	   65 20 69 74 20
	   68 65 6C 70 73
	   2E 00
 000005C1 49 20 75 73 65	     EC4       BYTE     "I used the waitMsg procedure to pause the program!", 0
	   64 20 74 68 65
	   20 77 61 69 74
	   4D 73 67 20 70
	   72 6F 63 65 64
	   75 72 65 20 74
	   6F 20 70 61 75
	   73 65 20 74 68
	   65 20 70 72 6F
	   67 72 61 6D 21
	   00
 000005F4 2E 2E 2E 20 49	     EC5       BYTE     "... I wanted to display the Fibonacci sequence generated in reverse...", 0
	   20 77 61 6E 74
	   65 64 20 74 6F
	   20 64 69 73 70
	   6C 61 79 20 74
	   68 65 20 46 69
	   62 6F 6E 61 63
	   63 69 20 73 65
	   71 75 65 6E 63
	   65 20 67 65 6E
	   65 72 61 74 65
	   64 20 69 6E 20
	   72 65 76 65 72
	   73 65 2E 2E 2E
	   00
 0000063B 54 68 61 74 20	     EC6       BYTE     "That would have been cool, but isn't that all still pretty incredible, ", 0
	   77 6F 75 6C 64
	   20 68 61 76 65
	   20 62 65 65 6E
	   20 63 6F 6F 6C
	   2C 20 62 75 74
	   20 69 73 6E 27
	   74 20 74 68 61
	   74 20 61 6C 6C
	   20 73 74 69 6C
	   6C 20 70 72 65
	   74 74 79 20 69
	   6E 63 72 65 64
	   69 62 6C 65 2C
	   20 00
 00000683 21 3F 21 3F 00	     EC7       BYTE     "!?!?", 0
 00000688 20 20 20 20 20	     app01     BYTE     "                    #", 0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   23 00
 0000069E 20 20 20 20 20	     app0      BYTE     "                  ###", 0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 23 23
	   23 00
 000006B4 20 20 20 20 20	     app1      BYTE     "                ####", 0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 23 23 23 23
	   00
 000006C9 20 20 20 20 20	     app2      BYTE     "                ### ", 0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 23 23 23 20
	   00
 000006DE 20 20 20 20 20	     app3      BYTE     "        #######    #######", 0
	   20 20 20 23 23
	   23 23 23 23 23
	   20 20 20 20 23
	   23 23 23 23 23
	   23 00
 000006F9 20 20 20 20 20	     app4      BYTE     "      ######################", 0
	   20 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 00
 00000716 20 20 20 20 20	     app5      BYTE     "     #####################", 0
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 00
 00000731 20 20 20 20 20	     app6      BYTE     "     ####################", 0    
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   00
 0000074B 20 20 20 20 20	     Appc      BYTE     "     ####################", 0
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   00
 00000765 20 20 20 20 20	     app8      BYTE     "     #####################", 0
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 00
 00000780 20 20 20 20 20	     app9      BYTE     "      ######################", 0
	   20 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 00
 0000079D 20 20 20 20 20	     app10     BYTE     "       ####################", 0
	   20 20 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 00
 000007B9 20 20 20 20 20	     app11     BYTE     "        #################", 0
	   20 20 20 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   00
 000007D3 20 20 20 20 20	     app12     BYTE     "          ####     #####", 0
	   20 20 20 20 20
	   23 23 23 23 20
	   20 20 20 20 23
	   23 23 23 23 00
 000007EC 57 61 6E 6E 61	     again     BYTE     "Wanna have another go? If yes, enter y", 0
	   20 68 61 76 65
	   20 61 6E 6F 74
	   68 65 72 20 67
	   6F 3F 20 49 66
	   20 79 65 73 2C
	   20 65 6E 74 65
	   72 20 79 00
 00000813 45 78 74 72 61	     dTitle    BYTE     "Extra Credit Message:", 0
	   20 43 72 65 64
	   69 74 20 4D 65
	   73 73 61 67 65
	   3A 00
 00000829 57 61 73 6E 27	     msg       BYTE     "Wasn't that Incredible?", 0
	   74 20 74 68 61
	   74 20 49 6E 63
	   72 65 64 69 62
	   6C 65 3F 00



				     ;generic variables
 00000841  00000021 [		     userName  BYTE     33 DUP(0)
	    00
	   ]
 00000862 00000001		     column    DWORD    1
 00000866 00000001		     elmnt     DWORD    1
 0000086A 00000000		     useNum    DWORD    ?
 0000086E 00000000		     tmpNum    DWORD    ?
 00000872 00000000		     thisNum   DWORD    ?
 00000876 00000000		     fibSum    DWORD    0
 0000087A 00			     choice    BYTE     ?





 00000000			.code
 00000000			main PROC

				;EC - do something INCREDIBLE - call waitMSG, setTextColor, add up the fibs, display fibs backwards
				;EC - display numbers in aligned columns

				     ;intro color
 00000000  B8 00000007		     mov       eax, lightGray
 00000005  E8 00000000 E	     call      setTextColor

				     ;INTRODUCTION

				     ; display title,  developer, and extra credit
 0000000A  BA 00000100 R	     mov       edx, OFFSET intro
 0000000F  E8 00000000 E	     call      writeString
 00000014  E8 00000000 E	     call      CrLf
 00000019  BA 00000000 R	     mov       edx, OFFSET ECi1
 0000001E  E8 00000000 E	     call writeString
 00000023  E8 00000000 E	     call      CrLf
 00000028  BA 0000002A R	     mov       edx, OFFSET ECi2a
 0000002D  E8 00000000 E	     call      writeString
 00000032  E8 00000000 E	     call      CrLf
 00000037  BA 00000090 R	     mov       edx, OFFSET ECi2b
 0000003C  E8 00000000 E	     call      writeString
 00000041  E8 00000000 E	     call      CrLf
 00000046  E8 00000000 E	     call      CrLf



				     ; get user name
 0000004B  B8 0000000A		     mov       eax, lightGreen
 00000050  E8 00000000 E	     call      setTextColor
 00000055  BA 00000135 R	     mov       edx, OFFSET getName
 0000005A  E8 00000000 E	     call      writeString
 0000005F  E8 00000000 E	     call      CrLf
 00000064  E8 00000000 E	     call      CrLf
 00000069  B8 0000000F		     mov       eax, white
 0000006E  E8 00000000 E	     call      setTextColor
 00000073  BA 00000841 R	     mov       edx, OFFSET userName  ;variable to hold name
 00000078  B9 00000020		     mov       ecx, 32               ;maxChars for userName, saving a 0 in spot 32
 0000007D  E8 00000000 E	     call      readString
 00000082  E8 00000000 E	     call      CrLf

				     ; greet user
 00000087  B8 0000000D		     mov       eax, lightMagenta
 0000008C  E8 00000000 E	     call      setTextColor
 00000091  BA 0000018C R	     mov       edx, OFFSET greetng1
 00000096  E8 00000000 E	     call      writeString
 0000009B  BA 00000841 R	     mov       edx, OFFSET userName
 000000A0  E8 00000000 E	     call      writeString
 000000A5  BA 00000190 R	     mov       edx, OFFSET greetng2
 000000AA  E8 00000000 E	     call      writeString
 000000AF  E8 00000000 E	     call      CrLf
 000000B4  E8 00000000 E	     call      CrLf



				     ;USER INSTRUCTION

				     ; introduce the program
 000000B9  B8 0000000B		     mov       eax, lightCyan
 000000BE  E8 00000000 E	     call      setTextColor
 000000C3  BA 000001CF R	     mov       edx, OFFSET intro1
 000000C8  E8 00000000 E	     call      writeString
 000000CD  BA 00000841 R	     mov       edx, OFFSET userName
 000000D2  E8 00000000 E	     call      writeString
 000000D7  BA 000001D4 R	     mov       edx, OFFSET intro2
 000000DC  E8 00000000 E	     call      writeString
 000000E1  E8 00000000 E	     call      CrLf
 000000E6  BA 0000021D R	     mov       edx, OFFSET intro3
 000000EB  E8 00000000 E	     call      writeString
 000000F0  E8 00000000 E	     call      CrLf
 000000F5  BA 00000288 R	     mov       edx, OFFSET intro4
 000000FA  E8 00000000 E	     call      writeString
 000000FF  E8 00000000 E	     call      CrLf
 00000104  E8 00000000 E	     call      CrLf

				     ;waitMsg
 00000109  B8 0000000F		     mov       eax, white
 0000010E  E8 00000000 E	     call      setTextColor
 00000113  E8 00000000 E	     call      waitMsg             ; press any key to continue
 00000118  E8 00000000 E	     call      CrLf
 0000011D  E8 00000000 E	     call      CrLf

 00000122			redo:
				     ;GET USER DATA

 00000122			     getData:
				          ; get user input
 00000122  B8 0000000B		          mov       eax, lightCyan
 00000127  E8 00000000 E	          call      setTextColor
 0000012C  BA 000002E9 R	          mov       edx, OFFSET prompt
 00000131  E8 00000000 E	          call      writeString
 00000136  E8 00000000 E	          call      CrLf
 0000013B  B8 0000000F		          mov       eax, white
 00000140  E8 00000000 E	          call      setTextColor
 00000145  E8 00000000 E	          call      readInt
 0000014A  A3 0000086A R	          mov       useNum, eax

				          ; validate input
 0000014F  83 F8 2E		          cmp       eax, MAX
 00000152  77 07		          ja        wrongNum
 00000154  83 F8 01		          cmp       eax, MIN
 00000157  72 02		          jb        wrongNum
 00000159  EB 2F		          jmp       Fibonacci

 0000015B			     wrongNum:
 0000015B  B8 0000000C		          mov       eax, lightRed
 00000160  E8 00000000 E	          call      setTextColor
 00000165  BA 0000033B R	          mov       edx, OFFSET wrngN1
 0000016A  E8 00000000 E	          call      writeString
 0000016F  BA 00000841 R	          mov       edx, OFFSET userName
 00000174  E8 00000000 E	          call      writeString
 00000179  BA 0000035B R	          mov       edx, OFFSET wrngN2
 0000017E  E8 00000000 E	          call      writeString
 00000183  E8 00000000 E	          call      CrLf
 00000188  EB 98		          jmp       getData


				     ;CALCULATE & DISPLAY FIBONACCI NUMBERS

 0000018A			     Fibonacci:

				          ; setup the loop
 0000018A  B8 0000000A		          mov       eax, lightGreen
 0000018F  E8 00000000 E	          call      setTextColor
 00000194  E8 00000000 E	          call      CrLf     
 00000199  B8 00000000		          mov       eax, 0              ;first # in seq
 0000019E  BB 00000001		          mov       ebx, 1              ;second # in seq
 000001A3  8B 0D 0000086A R	          mov       ecx, useNum         ;Nth term
 000001A9  C7 05 00000876 R	          mov       fibsum, 0
	   00000000
 000001B3  C7 05 00000866 R	          mov       elmnt, 1
	   00000001
 000001BD  C7 05 00000862 R	          mov       column, 1
	   00000001


				          ;calculate/print loop
 000001C7			          fibLOOP:

				               ; print current number
 000001C7  E8 00000000 E	               call      writeDec       
 000001CC  A3 00000872 R	               mov       thisNum, eax        ;save the current #
 000001D1  B0 09		               mov       al, 9               ;use ASCII tab to align
 000001D3  FF 05 00000866 R	               inc       elmnt
 000001D9  83 3D 00000866 R	               cmp       elmnt, 38           ;fix misalignment
	   26
 000001E0  7D 05		               jge       skipSpace
 000001E2  E8 00000000 E	               call      writeChar

 000001E7			          skipSpace:
 000001E7  E8 00000000 E	               call      writeChar
 000001EC  E8 00000000 E	               call      writeChar
 000001F1  A1 00000872 R	               mov       eax, thisNum        ;put the current # back in EAX
 000001F6  01 05 00000876 R	               add       fibsum, eax         ;add it to the running sum
 000001FC  FF 05 00000862 R	               inc       column
 00000202  83 3D 00000862 R	               cmp       column, 5
	   05
 00000209  7E 0F		               jle       calc

 0000020B  E8 00000000 E	               call      CrLf                ;newLine
 00000210  C7 05 00000862 R	               mov       column, 1
	   00000001

 0000021A			          calc:
				               ; calculate next number
 0000021A  A3 0000086E R	               mov       tmpNum, eax         ;save the previous #
 0000021F  03 C3		               add       eax, ebx            ;calculate the Fibonacci #
 00000221  8B 1D 0000086E R	               mov       ebx, tmpNum         ;save previous # to EBX
 00000227  E2 9E		               LOOP      fibLOOP

 00000229  E8 00000000 E	               call      CrLf
 0000022E  E8 00000000 E	               call      CrLf


				          ; display the sum of the numbers
				          ;in int
 00000233  B8 0000000E		          mov       eax, yellow
 00000238  E8 00000000 E	          call      setTextColor
 0000023D  BA 000003CC R	          mov       edx, OFFSET sumStr
 00000242  E8 00000000 E	          call      writeString
 00000247  A1 00000876 R	          mov       eax, fibSum
 0000024C  E8 00000000 E	          call      writeDec
 00000251  E8 00000000 E	          call      CrLf

				          ;in hex
 00000256  BA 000003FD R	          mov       edx, OFFSET sumHex
 0000025B  E8 00000000 E	          call      writeString
 00000260  E8 00000000 E	          call      writeHex
 00000265  E8 00000000 E	          call      CrLf

				          ;in binary
 0000026A  BA 0000042E R	          mov       edx, OFFSET sumBin
 0000026F  E8 00000000 E	          call      writeString
 00000274  E8 00000000 E	          call      writeBin
 00000279  E8 00000000 E	          call      CrLf
 0000027E  E8 00000000 E	          call      CrLf

				     ;DO IT AGAIN?

				     ;prompt the user
 00000283  B8 0000000B		     mov       eax, lightCyan
 00000288  E8 00000000 E	     call      setTextColor
 0000028D  BA 000007EC R	     mov       edx, OFFSET again
 00000292  E8 00000000 E	     call      WriteString
 00000297  E8 00000000 E	     call      CrLf

				     ;calculate conditional jump
 0000029C  E8 00000000 E	     call      ReadChar
 000002A1  A2 0000087A R	     mov       choice, al
 000002A6  E8 00000000 E	     call      CrLf
 000002AB  E8 00000000 E	     call      CrLf
 000002B0  80 3D 0000087A R	     cmp       choice, 'y'
	   79
 000002B7  0F 84 FFFFFE65	     je        redo
 000002BD  80 3D 0000087A R	     cmp       choice, 'Y'
	   59
 000002C4  0F 84 FFFFFE58	     je        redo


				     ;FAREWELL...

				     ; say goodbye
 000002CA  B8 0000000A		     mov       eax, lightGreen
 000002CF  E8 00000000 E	     call      setTextColor
 000002D4  BA 0000045F R	     mov       edx, OFFSET bye1
 000002D9  E8 00000000 E	     call      writeString
 000002DE  BA 00000841 R	     mov       edx, OFFSET userName
 000002E3  E8 00000000 E	     call      writeString
 000002E8  BA 00000468 R	     mov       edx, OFFSET bye2
 000002ED  E8 00000000 E	     call      writeString
 000002F2  E8 00000000 E	     call      CrLf
 000002F7  E8 00000000 E	     call      CrLf

				     ;delay
 000002FC  B8 000007D0		     mov       eax, 2000
 00000301  E8 00000000 E	     call      delay

				     ;Apple == bestest
 00000306  B8 0000000F		     mov       eax, white
 0000030B  E8 00000000 E	     call      setTextColor

				     ;prints an apple (literally, incredible!)
 00000310  BA 00000688 R	     mov       edx, OFFSET app01
 00000315  E8 00000000 E	     call      writeString
 0000031A  E8 00000000 E	     call      CrLf
 0000031F  BA 0000069E R	     mov       edx, OFFSET app0
 00000324  E8 00000000 E	     call      writeString
 00000329  E8 00000000 E	     call      CrLf
 0000032E  BA 000006B4 R	     mov       edx, OFFSET app1
 00000333  E8 00000000 E	     call      writeString
 00000338  E8 00000000 E	     call      CrLf
 0000033D  BA 000006C9 R	     mov       edx, OFFSET app2
 00000342  E8 00000000 E	     call      writeString
 00000347  E8 00000000 E	     call      CrLf
 0000034C  BA 000006DE R	     mov       edx, OFFSET app3
 00000351  E8 00000000 E	     call      writeString
 00000356  E8 00000000 E	     call      CrLf
 0000035B  BA 000006F9 R	     mov       edx, OFFSET app4
 00000360  E8 00000000 E	     call      writeString
 00000365  E8 00000000 E	     call      CrLf
 0000036A  BA 00000716 R	     mov       edx, OFFSET app5
 0000036F  E8 00000000 E	     call      writeString
 00000374  E8 00000000 E	     call      CrLf
 00000379  BA 00000731 R	     mov       edx, OFFSET app6
 0000037E  E8 00000000 E	     call      writeString
 00000383  E8 00000000 E	     call      CrLf
 00000388  BA 0000074B R	     mov       edx, OFFSET appc
 0000038D  E8 00000000 E	     call      writeString
 00000392  E8 00000000 E	     call      CrLf
 00000397  BA 00000765 R	     mov       edx, OFFSET app8
 0000039C  E8 00000000 E	     call      writeString
 000003A1  E8 00000000 E	     call      CrLf
 000003A6  BA 00000780 R	     mov       edx, OFFSET app9
 000003AB  E8 00000000 E	     call      writeString
 000003B0  E8 00000000 E	     call      CrLf
 000003B5  BA 0000079D R	     mov       edx, OFFSET app10
 000003BA  E8 00000000 E	     call      writeString
 000003BF  E8 00000000 E	     call      CrLf
 000003C4  BA 000007B9 R	     mov       edx, OFFSET app11
 000003C9  E8 00000000 E	     call      writeString
 000003CE  E8 00000000 E	     call      CrLf
 000003D3  BA 000007D3 R	     mov       edx, OFFSET app12
 000003D8  E8 00000000 E	     call      writeString
 000003DD  E8 00000000 E	     call      CrLf
 000003E2  E8 00000000 E	     call      CrLf
 000003E7  E8 00000000 E	     call      CrLf

				     ;delay
 000003EC  B8 000007D0		     mov       eax, 2000
 000003F1  E8 00000000 E	     call      delay

				     ;print Extra Credit Msgs
 000003F6  B8 0000000D		     mov       eax, lightMagenta
 000003FB  E8 00000000 E	     call      setTextColor
 00000400  BA 0000048A R	     mov       edx, OFFSET EC1
 00000405  E8 00000000 E	     call      writeString
 0000040A  E8 00000000 E	     call      CrLf
 0000040F  BA 000004C9 R	     mov       edx, OFFSET EC2
 00000414  E8 00000000 E	     call      writeString
 00000419  E8 00000000 E	     call      CrLf
 0000041E  BA 00000528 R	     mov       edx, OFFSET EC3
 00000423  E8 00000000 E	     call      writeString
 00000428  E8 00000000 E	     call      CrLf
 0000042D  BA 000005C1 R	     mov       edx, OFFSET EC4
 00000432  E8 00000000 E	     call      writeString
 00000437  E8 00000000 E	     call      CrLf
 0000043C  BA 000005F4 R	     mov       edx, OFFSET EC5
 00000441  E8 00000000 E	     call      writeString
 00000446  E8 00000000 E	     call      CrLf
 0000044B  BA 0000063B R	     mov       edx, OFFSET EC6
 00000450  E8 00000000 E	     call      writeString
 00000455  BA 00000841 R	     mov       edx, OFFSET userName
 0000045A  E8 00000000 E	     call      writeString
 0000045F  BA 00000683 R	     mov       edx, OFFSET EC7
 00000464  E8 00000000 E	     call      writeString
 00000469  E8 00000000 E	     call      CrLf
 0000046E  BA 0000057E R	     mov       edx, OFFSET ECA
 00000473  E8 00000000 E	     call      writeString
 00000478  E8 00000000 E	     call      CrLf
 0000047D  E8 00000000 E	     call      CrLf

 00000482  B8 0000000B		     mov       eax, lightCyan
 00000487  E8 00000000 E	     call      setTextColor

				     ;delay
 0000048C  B8 00001388		     mov       eax, 5000
 00000491  E8 00000000 E	     call      delay

				     ;open a msgBox!
 00000496  BB 00000813 R	     mov       ebx, OFFSET dTitle
 0000049B  BA 00000829 R	     mov       edx, OFFSET msg
 000004A0  E8 00000000 E	     call      msgBoxAsk


					exit	; exit to operating system
 000004A5  6A 00	   *	    push   +000000000h
 000004A7  E8 00000000 E   *	    call   ExitProcess
 000004AC			main ENDP

				; (insert additional procedures here)

				END main
Microsoft (R) Macro Assembler Version 14.00.24210.0	    10/16/16 17:17:18
<Program 2: Calculate a Fibonacci Sequence     (Project_02.a  Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000087B Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000004AC Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000004AC Public STDCALL
  redo . . . . . . . . . . . . .	L Near	 00000122 _TEXT	
  getData  . . . . . . . . . . .	L Near	 00000122 _TEXT	
  wrongNum . . . . . . . . . . .	L Near	 0000015B _TEXT	
  Fibonacci  . . . . . . . . . .	L Near	 0000018A _TEXT	
  fibLOOP  . . . . . . . . . . .	L Near	 000001C7 _TEXT	
  skipSpace  . . . . . . . . . .	L Near	 000001E7 _TEXT	
  calc . . . . . . . . . . . . .	L Near	 0000021A _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
Appc . . . . . . . . . . . . . .	Byte	 0000074B _DATA	
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
EC1  . . . . . . . . . . . . . .	Byte	 0000048A _DATA	
EC2  . . . . . . . . . . . . . .	Byte	 000004C9 _DATA	
EC3  . . . . . . . . . . . . . .	Byte	 00000528 _DATA	
EC4  . . . . . . . . . . . . . .	Byte	 000005C1 _DATA	
EC5  . . . . . . . . . . . . . .	Byte	 000005F4 _DATA	
EC6  . . . . . . . . . . . . . .	Byte	 0000063B _DATA	
EC7  . . . . . . . . . . . . . .	Byte	 00000683 _DATA	
ECA  . . . . . . . . . . . . . .	Byte	 0000057E _DATA	
ECi1 . . . . . . . . . . . . . .	Byte	 00000000 _DATA	
ECi2a  . . . . . . . . . . . . .	Byte	 0000002A _DATA	
ECi2b  . . . . . . . . . . . . .	Byte	 00000090 _DATA	
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MAX  . . . . . . . . . . . . . .	Text   	 46
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MIN  . . . . . . . . . . . . . .	Text   	 1
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
again  . . . . . . . . . . . . .	Byte	 000007EC _DATA	
app01  . . . . . . . . . . . . .	Byte	 00000688 _DATA	
app0 . . . . . . . . . . . . . .	Byte	 0000069E _DATA	
app10  . . . . . . . . . . . . .	Byte	 0000079D _DATA	
app11  . . . . . . . . . . . . .	Byte	 000007B9 _DATA	
app12  . . . . . . . . . . . . .	Byte	 000007D3 _DATA	
app1 . . . . . . . . . . . . . .	Byte	 000006B4 _DATA	
app2 . . . . . . . . . . . . . .	Byte	 000006C9 _DATA	
app3 . . . . . . . . . . . . . .	Byte	 000006DE _DATA	
app4 . . . . . . . . . . . . . .	Byte	 000006F9 _DATA	
app5 . . . . . . . . . . . . . .	Byte	 00000716 _DATA	
app6 . . . . . . . . . . . . . .	Byte	 00000731 _DATA	
app8 . . . . . . . . . . . . . .	Byte	 00000765 _DATA	
app9 . . . . . . . . . . . . . .	Byte	 00000780 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
bye1 . . . . . . . . . . . . . .	Byte	 0000045F _DATA	
bye2 . . . . . . . . . . . . . .	Byte	 00000468 _DATA	
choice . . . . . . . . . . . . .	Byte	 0000087A _DATA	
column . . . . . . . . . . . . .	DWord	 00000862 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
dTitle . . . . . . . . . . . . .	Byte	 00000813 _DATA	
elmnt  . . . . . . . . . . . . .	DWord	 00000866 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
fNstr1 . . . . . . . . . . . . .	Byte	 0000039D _DATA	
fNstr2 . . . . . . . . . . . . .	Byte	 000003BB _DATA	
fibSum . . . . . . . . . . . . .	DWord	 00000876 _DATA	
getName  . . . . . . . . . . . .	Byte	 00000135 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
greetng1 . . . . . . . . . . . .	Byte	 0000018C _DATA	
greetng2 . . . . . . . . . . . .	Byte	 00000190 _DATA	
intro0 . . . . . . . . . . . . .	Byte	 000001B6 _DATA	
intro1 . . . . . . . . . . . . .	Byte	 000001CF _DATA	
intro2 . . . . . . . . . . . . .	Byte	 000001D4 _DATA	
intro3 . . . . . . . . . . . . .	Byte	 0000021D _DATA	
intro4 . . . . . . . . . . . . .	Byte	 00000288 _DATA	
intro  . . . . . . . . . . . . .	Byte	 00000100 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
msg  . . . . . . . . . . . . . .	Byte	 00000829 _DATA	
prompt . . . . . . . . . . . . .	Byte	 000002E9 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
sumBin . . . . . . . . . . . . .	Byte	 0000042E _DATA	
sumHex . . . . . . . . . . . . .	Byte	 000003FD _DATA	
sumStr . . . . . . . . . . . . .	Byte	 000003CC _DATA	
thisNum  . . . . . . . . . . . .	DWord	 00000872 _DATA	
tmpNum . . . . . . . . . . . . .	DWord	 0000086E _DATA	
useNum . . . . . . . . . . . . .	DWord	 0000086A _DATA	
userName . . . . . . . . . . . .	Byte	 00000841 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wrngN1 . . . . . . . . . . . . .	Byte	 0000033B _DATA	
wrngN2 . . . . . . . . . . . . .	Byte	 0000035B _DATA	
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
